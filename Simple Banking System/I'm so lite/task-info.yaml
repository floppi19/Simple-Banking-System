type: edu
custom_name: stage3
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {}
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {}
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }
    }
  learner_created: false
- name: src/banking/Application.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class Application {
        private static boolean isLogged = false;
        private static Account currentUser = null;

        public void start() {
            while (true) {
                showMenu();
                callMethods(readOption());
            }
        }
        private void showMenu() {
            if (currentUser == null) {
                System.out.println("1. Create an account\n" +
                        "2. Log into account\n" +
                        "0. Exit");
            } else {
                System.out.println("1. Balance\n" +
                        "2. Log out\n" +
                        "0. Exit");
            }
        }


        private int readOption() {
            System.out.print("> ");
            int opt = 0;
            try {
                opt = new Scanner(System.in).nextInt();
            } catch (Exception e) {
                System.out.println("Invalid option. ");
            }
            return opt;
        }

        private void callMethods(int opt) {
            if (currentUser == null) {
                switch (opt) {
                    case 1:
                        createAccount();
                        break;
                    case 2:
                        logIn();
                        break;
                    case 0:
                        exitApplication();
                    default:
                        System.out.println("Invalid option");
                }
            } else {
                switch (opt) {
                    case 1:
                        showBalance();
                        break;
                    case 2:
                        logOut();
                        break;
                    case 0:
                        exitApplication();
                    default:
                        System.out.println("Invalid option");
                }
            }
        }

        private void logOut() {
            currentUser = null;
        }

        private void showBalance() {
            System.out.println("Balance: " + currentUser.getBalance());
        }

        private void createAccount() {
            Account user = new Account();
            System.out.println("Your card has been created\n" +
                    "Your card number:\n" +
                    user.getCardNumber() +
                    "\nYour card PIN:\n" +
                    user.getPIN());

        }

        private void logIn() {
            System.out.print("Enter your card number:\n>");
            String cardNumber = new Scanner(System.in).next();
            System.out.print("Enter your PIN:\n>");
            String PIN = new Scanner(System.in).next();


            Account currentUser = Account.getUserIfExists(cardNumber, PIN);
            if (currentUser == null) {
                System.out.println("\nWrong card number or PIN!\n");
            } else {
                System.out.println("You have successfully logged in!");
                Application.currentUser = currentUser;
            }
        }

        private void exitApplication() {
            System.out.println("\nBye!\n");
            System.exit(0);
        }
    }
  learner_created: true
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.Random;

    public class Account {

        private String cardNumber;
        private String PIN;
        private long balance;
        private static ArrayList<Account> users = new ArrayList<>();

        public Account() {
            String cardNumber = "400000";
            cardNumber += getUniqueAccountIdentifier();

            try {
                cardNumber += luhnChecksum(cardNumber);
            }catch (Exception e) {
                e.printStackTrace();
            }
            this.cardNumber = cardNumber;
            this.PIN = generatePIN();
            this.balance = 0;
            users.add(this);
        }

        public String getCardNumber() {
            return cardNumber;
        }

        public String getPIN() {
            return PIN;
        }

        public long getBalance() {
            return balance;
        }

        public static ArrayList<Account> getUsers() {
            return users;
        }

        private String generatePIN() {
            return "" + (new Random().nextInt(9999 - 1001) + 1000);
        }
        private String getUniqueAccountIdentifier() {
            Random random = new Random();
            String accountIdentifier = "";

            do {
                accountIdentifier += random.nextInt(999 - 101) + 100;
                accountIdentifier += random.nextInt(999 - 101) + 100;
                accountIdentifier += random.nextInt(999 - 101) + 100;
            } while (containsUser(accountIdentifier) || accountIdentifier.length() != 9);
            return accountIdentifier;
        }
        public boolean existsCardNumber(String cardNumber) {
            if ((users.stream().filter(
                    account -> account.getCardNumber().equals(cardNumber))
                    .findFirst().orElse(null)) != null){
                return true;
            }
            return false;
        }
        public  boolean isPinCorrect(String cardNumber, String PIN) throws NullPointerException {
            if (users.stream().filter(
                    account -> account.getCardNumber().equals(cardNumber))
                    .findFirst().orElse(null).getPIN().equals(PIN)
            ) {
                return true;
            }
            return false;
        }
        public static Account getUserIfExists(String cardNumber, String PIN){
            Account currentUser = users.stream().filter(
                    account -> account.getCardNumber().equals(cardNumber))
                    .findFirst().orElse(null);

            if (currentUser == null ) {
                return null;
            } else if (currentUser.getPIN().equals(PIN)) {
                return currentUser;
            } else {
                return null;
            }
        }

        private boolean containsUser(String accountIdentifier) {
            for (Account user : users) {
                if (user.cardNumber.substring(6, 15).equals(accountIdentifier)){
                    return true;
                }
            }
            return false;
        }
        private int luhnChecksum(String incompleteCardNumber) throws Exception {
            int[] digits = new int[15];
            int sum = 0;
            int checkSum = 0;

            if (incompleteCardNumber.length() != 15) {
                throw new Exception("Incompatible cardNumber length. Length should be 15. Your length: " + incompleteCardNumber.length());
            }

            //0. Get digits from incompleteCardNumber
            for (int i = 0; i < incompleteCardNumber.length(); i++) {
                digits[i] = Integer.parseInt(String.valueOf(incompleteCardNumber.charAt(i)));
            }

            //2. Multiply Odd digits by 2
            for (int i = 0; i < digits.length; i++) {
                if (i % 2 == 0) {
                    digits[i] = digits[i] * 2;
                }
            }

            //3. Substract 9 to numbers over 9
            for (int i = 0; i < digits.length; i++) {
                if (digits[i] > 9) {
                    digits[i] = digits[i] - 9;
                }
            }

            //4. Add all numbers
            for (int i = 0; i < digits.length; i++) {
                sum += digits[i];
            }

            //5. Divide by 10
            if (sum % 10 == 0) {
                checkSum = 0;
            } else {
                checkSum = 10 - (sum % 10);
            }

            return checkSum;
        }

    }
  learner_created: true
- name: card.s3db
  visible: true
  learner_created: true
- name: tempDatabase.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/517/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 11 Feb 2021 17:47:28 UTC
record: 3
